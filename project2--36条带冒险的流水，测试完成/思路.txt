
##36条指令的流水
分成5类：
> - 第一类：类addu rd,rs,rt
> - 第二类：分支跳转，类BEQ rs,rt,offset
> - 第三类：装载存储，与存储器有关的指令，类LW rt,offset(base)
> - 第四类：跳转指令，类J target
> - 第五类：跳转并链接，类 JALR rs


### 冒险解决
#### 第一类，类addu rd,rs,rt
原来的Forwarding Unit（转发）即可解决冒险
#### 第二类，分支跳转，类BEQ rs,rt,offset

##### 插空气泡
类BEQ即可解决冒险，在ID阶段从寄存器里取出busA和busB（也有可能还没有写回寄存器，如下）

  

    add $1, $2, $3
    add $4, $5, $6
    beq stalled
    beq $1, $4, target

上述指令需要在add $4在MEM阶段转发给ID
**（EX.RegWr==1） &&（EX.Rw == ID.Ra || EX.Rw == ID.Rb）**时出现冒险（RegWr是写回寄存器），这时候beq向上插一个空气泡，即**向ID/EX中间寄存器插入一个空气泡（即控制信号清零），并保持PC和IF/ID中间寄存器的值不变**。
再考虑

    lw $1, addr
    beq stalled
    beq stalled
    beq $1, $0, target

上述指令需要lw插两个空气泡，在WB阶段转发给beq。因为lw会向下插一个气泡，beq向上插一个气泡（这两个气泡其实是同一个，因为beq在ID，lw在EX）,所以还需要考虑第二个气泡，**MEM.MemtoReg=1 &&（MEM.Rw == ID.Ra || MEM.Rw == ID.Rb）** 插入空气泡。


综上，当  **  (（（EX.RegWr==1） &&（EX.Rw == ID.Ra || EX.Rw == ID.Rb）) || （MEM.MemtoReg=1 &&（MEM.Rw == ID.Ra || MEM.Rw == ID.Rb））)  **   需要插空气泡

##### 转发
冒险可能是MEM冒险，需要像forwardingUnit一样判断。转发是转发到busA,busB：

-----
> **MEM hazard**
> 
> - if ((MEM.RegWr==1) and (MEM.Rd ≠ 0) and (MEM.Rd = id.Rs))
  **ForwardA = 1, busA = mem_alu_result**
> - if ((MEM.RegWr==1) and (MEM.Rd ≠ 0) and (MEM.Rd = id.Rt))
   **ForwardB = 1, busB = mem_alu_result**

##### 当跳转时flush
若branch要跳转，则刷新IF/ID（将信号指令都置为0）和更新PC（PC_branch）

#### 第三类，装载存储，与存储器有关的指令，类LW rt,offset(base)
lw-use的冒险可由HazardDetectionUnit解决。
lw在ex阶段时，可能出现冒险（**ex.MemtoReg==1 && (ex.Rw == id.Rb || ex.Rw == id.Ra)**），此时让ID/EX中间寄存器的控制信号为0，而IF/ID中间寄存器和PC保持不变。（插入一个空气泡，如下面的例子）

	lw $2, 20($1)
	add becomes nop
	add $4, $2, $5
	or $8, $2, $6
	 
上述指令中，lw在WB阶段把\$2数据写回，同时or在ID阶段把\$2数据取出，所以**寄存器堆需要前半周期写回，后半周期取数据！！！**

#### 第四类：跳转指令，类J target
在ID处跳转，通过jump信号刷新IF/ID中间寄存器和更新PC

#### 第五类：跳转并链接，类 JALR rs
专门为31号寄存器开一个读入口！！跳转指令类似第四类~

down

### 控制信号及器件

所有的第一大类指令均在ALU内解决。
	

> 立即数装载高位	LUI rt,imm	001111	00000	rt	imm			addu	GPR[rt] <= {imm, 16'd0}

直接取出ALU_BusB的低16位

----

> - 算术右移	SRA rd,rt,shf	000000	00000	rt	rd	shf	000011
> - 逻辑左移	SLL rd,rt,shf	000000	00000	rt	rd	shf	000000	sll
> - 逻辑右移	SRL rd,rt,shf	000000	00000	rt	rd	shf	000010	srl

新增控制信号ALUshf和数据shf，在ALUSrc后再次选择。注意是Rd => Rt!!!
所以busA 和busB都要重新选择过！

> ALUshf = (op == 000000  && (func == 000000 || func == 000010 || func == 000011))

---

> - 装载字	LW rt,offset(base)	100011	base	rt	offset		
> - 装载字节，并作符号扩展	LB rt, offset(base)	100000	base	rt	offset		
> - 装载字节，并作无符号扩展	LBU rt,offset(base)	100100	base	rt	offset		

对于这三条指令，新增MemRead控制信号，在dm上使用

> MemRead = 00 ，不读取 0 
> MemRead = 01 ， LW
> MemRead = 10 ， LB
> MemRead = 11 ，LBU

---
> - 存储字	SW rt,offset(base)	101011	base	rt	offset		
> - 存储字节	SB rt, offset(base)	101000	base	rt	offset		

对于这两条指令，修改MemWr控制信号，在dm上使用
> MemWr = 00 , 不写入
> MemWr = 01 , SW
> MemWr = 10 , SB 

还是用dm的[1023:0],SB的时候就修改dm[i]的8位
dm的addr[11:2]修改成[11:0]


----

> - 相等跳转	BEQ rs,rt,offset	000100	rs	rt	offset		
> - 不等跳转	BNE rs,rt,offset	000101	rs	rt	offset		
> - 大于或等于零跳转	BEGEZ rs,offset	000001	rs	00001	offset		
> - 大于零跳转	BGTZ rs,offset	000111	rs	00000	offset		
> - 小于或等于零跳转	BLEZ rs,offset	000110	rs	00000	offset		
> - 小于零跳转	BLTZ rs,offset	000001	rs	00000	offset		

跳转指令的Branch信号也要扩展
> branch = 000, 不跳转
> branch = 001,  BEQ
> branch = 010,  BNE
> branch = 011,  BEGEZ
> branch = 100,  BGTZ
> branch = 101,  BLEZ
> branch = 110,  BLTZ

在分支判断（branchOrNot）模块中判断即可。


R指令一起写（排除掉JR，JALR）



> -  J target | 000010	target | 			PC <= {B_PC[31:28], target<<2, 2'd0}
> - JR rs | 000000	rs	00000000		00000	001000 | 		PC <=  GPR[rs]
> -  JALR rs | 000000	rs	00000	11111	00000	001001		| GPR[31] <= B_PC + 4, PC <= GPR[rs]
> - JAL target | 000011	target | 				GPR[31] <= B_PC + 4, PC <= {B_PC[31:28], target << 2}

第五大类指令跳转，返回给PC后需要进行选择，
> Jump = 00 && Branch_ok = 0 , B_PC
> Jump = 10  , GPR[rs]
> Jump = 01 , {B_PC[31:28], target<<2, 2'd0}
> Branch_ok = 1, GPR[base] + sign_ext(offset)

#### PC的赋值
PC的赋值之前写错了。。
第二阶段（ID）传PC地址回去的时候应该直接传，不要传imm16之类的，因为插空气泡的操作可能会使*id_PC ！= PC + 4*


#### 移位指令的R[busB]>>R[busA}和SUBU相反！！
六条移位指令，分别对应ALUctr：sll，sra，srl

#### JR和JALR也要像branch一样，需要插空气泡，因为要用到R[rs]!!
